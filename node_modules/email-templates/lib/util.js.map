{"version":3,"sources":["../src/util.js"],"names":[],"mappings":";;;;;QAQgB,eAAe,GAAf,eAAe;QAWf,YAAY,GAAZ,YAAY;QAgBZ,UAAU,GAAV,UAAU;;;;wBAnCZ,UAAU;;;;kBACK,IAAI;;oBAChB,MAAM;;;;+BACR,oBAAoB;;;;AAEnC,IAAM,SAAS,GAAG,sBAAE,SAAS,KAJrB,QAAQ,CAIuB,CAAA;AACvC,IAAM,KAAK,GAAG,sBAAE,SAAS,mBAAM,CAAA;;AAExB,SAAS,eAAe,CAAE,IAAI,EAAE,QAAQ,EAAE;AAC/C,SAAO,0BAAM,UAAC,OAAO,EAAE,MAAM,EAAK;AAChC,YATc,IAAI,EASb,IAAI,EAAE,UAAC,GAAG,EAAE,IAAI,EAAK;AACxB,UAAI,GAAG,EAAE,OAAO,MAAM,CAAC,GAAG,CAAC,CAAA;AAC3B,UAAI,CAAC,IAAI,CAAC,WAAW,EAAE,EAAE,OAAO,MAAM,EAAE,CAAA;AACxC,aAAO,EAAE,CAAA;KACV,CAAC,CAAA;GACH,CAAC,CACD,OAAO,CAAC,QAAQ,CAAC,CAAA;CACnB;;AAEM,SAAS,YAAY,CAAE,IAAI,EAAE,IAAI,EAAE;AACxC,SAAO,KAAK,MAAI,IAAI,UAAK,IAAI,QAAK,CACjC,IAAI,CAAC,UAAC,KAAK,EAAK;AACf,QAAI,CAAC,KAAK,CAAC,MAAM,EAAE,OAAO,IAAI,CAAA;;AAE9B,WAAO,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,CACjC,IAAI,CAAC,UAAC,OAAO,EAAK;AACjB,UAAI,CAAC,OAAO,CAAC,MAAM,EAAE,OAAO,IAAI,CAAA;AAChC,aAAO;AACL,gBAAQ,EAAE,KAAK,CAAC,CAAC,CAAC;AAClB,eAAO,EAAE,OAAO;OACjB,CAAA;KACF,CAAC,CAAA;GACH,CAAC,CAAA;CACH;;AAEM,SAAS,UAAU,CAAE,IAAI,EAAE,OAAO,EAAE;AACzC,MAAI,CAAC,IAAI,EAAE,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAA;AACvC,SAAO,6BAAG,MAAM,CAAC,IAAI,EAAE,OAAO,CAAC,CAAA;CAChC","file":"util.js","sourcesContent":["import P from 'bluebird'\nimport {readFile, stat} from 'fs'\nimport glob from 'glob'\nimport tm from './template-manager'\n\nconst readFileP = P.promisify(readFile)\nconst globP = P.promisify(glob)\n\nexport function ensureDirectory (path, callback) {\n  return new P((resolve, reject) => {\n    stat(path, (err, stat) => {\n      if (err) return reject(err)\n      if (!stat.isDirectory()) return reject()\n      resolve()\n    })\n  })\n  .nodeify(callback)\n}\n\nexport function readContents (path, type) {\n  return globP(`${path}/*${type}.*`)\n  .then((files) => {\n    if (!files.length) return null\n\n    return readFileP(files[0], 'utf8')\n    .then((content) => {\n      if (!content.length) return null\n      return {\n        filename: files[0],\n        content: content\n      }\n    })\n  })\n}\n\nexport function renderFile (file, options) {\n  if (!file) return Promise.resolve(null)\n  return tm.render(file, options)\n}\n\n"]}